AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

# TODO: paramterise the domains.
Parameters:
  ScheduleStartInstancePeriodicityParameter:
    Description: "Please specify how often the worker should run"
    Default: "rate(2 hours)"
    Type: String
  SchedulePopulateWorkQueuePeriodicityParameter:
    Description: "Please specify how often the worker should run"
    Default: "rate(7 days)"
    Type: String
  ScheduleNmapWorkerInvocationPeriodicityParameter:
    Description: "Please specify how often the worker should run"
    Default: "rate(10 minutes)"
    Type: String
  DynamoDbRetentionPeriod:
    Description: "Please specify in seconds how long the DynamoDB table should retain its items for"
    Default: "315360000" # 10 years
    Type: Number
  ReconngWorkspaceName:
    Description: "Please specify the Workspace Name to be used"
    Default: ""
    Type: String
  DomainsToEnumerate:
    Description: "Please provide a comma-delimited list of domains to enumerate"
    Default: ""
    Type: String
  GitHubUsername:
    Description: "Please provide the username for accessing the private repo"
    Type: String    
  GitHubPersonalAccessToken:
    Description: "Please provide the PAT for accessing the private repo"
    Type: String    
  KeyPairName:
    Description: "Please provide the name of the key pair corresponding to the EC2 worker"
    Type: String
  EcrRepoArn:
    Description: "Please provide the ARN of the ECR repo in which the build containers are stored"
    Type: String
  EcrRepoUri:
    Description: "Please provide the URI of the ECR repo in which the build containers are stored"
    Type: String

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "recon-ng configuration"
        Parameters: 
          - ReconngWorkspaceName
          - DomainsToEnumerate
      - 
        Label: 
          default: "GitHub configuration"
        Parameters: 
          - GitHubUsername
          - GitHubPersonalAccessToken

Resources:
  WorkerInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    DependsOn: WorkerInstanceProfile # If the IAM objects aren't there, then the aws cli invocations in the UserData won't be authorised.
    Properties:
      ImageId: "ami-02a66f06b3557a897"
      IamInstanceProfile: !Ref WorkerInstanceProfile
      InstanceType: "t2.micro"
      KeyName: !Ref KeyPairName
      SecurityGroupIds: 
        - !Ref WorkerInstanceSecurityGroup
      SubnetId: ""
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash"
              - "sudo yum update -y"
              - "sudo yum install git pip nmap -y"

              - "# recon-ng installation"
              - "cd /home/ec2-user"
              - "git clone https://github.com/lanmaster53/recon-ng.git"
              - "pip3 install -r recon-ng/REQUIREMENTS"
              - "echo export PATH=\"$PATH:/home/ec2-user/recon-ng/\" >> .bash_profile"

              - "# Clone the repo"
              - Fn::Join:
                - ""
                - - "git clone https://"
                  - !Ref GitHubUsername
                  - ":"
                  - !Ref GitHubPersonalAccessToken
                  - "@github.com/pa-wills/perimeter-scanner.git"
              - "cp perimeter-scanner/enumerateSubdomains.bash ."
              - "# rm -rf perimeter-scanner"

              - "# Ensure that the script will run at boot"
              - "echo \"@reboot bash /home/ec2-user/enumerateSubdomains.bash &> /home/ec2-user/enumerate.log\" | sudo crontab -u ec2-user -"

              - "# Env vars necessary for the code on the EC2 instance to do its job."
              - Fn::Join:
                - ""
                - - "echo export PSCAN_DOMAINS_TO_ENUMERATE=\""
                  - !Ref DomainsToEnumerate
                  - "\" >> .bash_profile"
              - Fn::Join:
                - ""
                - - "echo export PSCAN_RECONNG_WORKSPACE=\""
                  - !Ref ReconngWorkspaceName
                  - "\" >> .bash_profile"
              - Fn::Join:
                - ""
                - - "echo export PSCAN_S3_BUCKET=\""
                  - !Ref ResultsBucket
                  - "\" >> .bash_profile"

              - "# Signal stack that creation has successfully completed."
              - Fn::Join:
                - ""
                - - "/opt/aws/bin/cfn-signal -e $? --stack "
                  - !Ref 'AWS::StackName'
                  - " --resource WorkerInstance --region "
                  - !Ref 'AWS::Region'

              - "# Stop the instance (we don't run enumeration on the launch boot)."
              - "INSTANCEID=\"$(curl http://169.254.169.254/latest/meta-data/instance-id)\"" # You can't use a !Ref without causing a circular reference.
              - "aws ec2 stop-instances --instance-ids $INSTANCEID --region ap-southeast-2"

  WorkerInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22 IPv4 & v6
      SecurityGroupIngress:
        - Description: 'Allow SSH IPv4 IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow SSH IPv6 IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIpv6: ::/0

  WorkerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles:
        - !Ref WorkerInstanceRole

  WorkerInstanceRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Path: "/"

  WorkerInstanceRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: policyForTheEc2Instance
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - 's3:PutObject'
            Resource: !Join
              - ''
              - - !GetAtt ResultsBucket.Arn
                - /*
          - Effect: Allow
            Action: 
              - 'ec2:StopInstances'
            Resource: '*' # You'd want to constrain this to an Instance, but how to do so without a circular reference?
      Roles:
        - !Ref WorkerInstanceRole

  ResultsBucket:
    Type: AWS::S3::Bucket

  NmapWorkQueue:
    Type: AWS::SQS::Queue
    Properties:
      # TODO: message retention should probably match the perioidicity of the quueue-populating lambda.
      MessageRetentionPeriod: 604800 # 7 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt NmapWorkQueueDLQ.Arn
        maxReceiveCount: 5

  NmapWorkQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 # 14 days

  ResultsTableHosts:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "datetime"
          AttributeType: "S"
        -
          AttributeName: "host"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - 
          IndexName: host-datetime-index # I have to trick it in order to overcome recent deletion, hence "2"
          KeySchema:
            -
              AttributeName: "host"
              KeyType: "HASH"
            -
              AttributeName: "datetime"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
      KeySchema:
        -
          AttributeName: "datetime"
          KeyType: "HASH"
        -
          AttributeName: "host"
          KeyType: "RANGE"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true

  DerivedTableHostsOfInterest:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "host"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        -
          AttributeName: "host"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true

  ResultsTableHostPorts:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "datetime"
          AttributeType: "S"
        -
          AttributeName: "composite_HostIpUdpTcp"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - 
          IndexName: hostports-datetime-index # I have to trick it in order to overcome recent deletion, hence "2"
          KeySchema:
            -
              AttributeName: "composite_HostIpUdpTcp"
              KeyType: "HASH"
            -
              AttributeName: "datetime"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
      KeySchema:
        -
          AttributeName: "datetime"
          KeyType: "HASH"
        -
          AttributeName: "composite_HostIpUdpTcp"
          KeyType: "RANGE"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true

  DerivedTableHostPortsOfInterest:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "composite_HostIpUdpTcp"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        -
          AttributeName: "composite_HostIpUdpTcp"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true

  onArrivalOfHostsStreamEvent:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Description: 'The function that updates the Hosts of Interest table.'
      Environment:
        Variables:
          TABLE_NAME_HOSTS_OF_INTEREST:
            Ref: DerivedTableHostsOfInterest
      Events:
        DyDbEvent:
          Type: DynamoDB
          Properties:
            StartingPosition: LATEST
            Stream:
              !GetAtt ResultsTableHosts.StreamArn
      Handler: onArrivalOfHostsStreamEvent.handler
      MemorySize: 256
      Role: !GetAtt onPopulateHostsOfInterestTableExecutionRole.Arn
      Runtime: python3.9
      Timeout: 20

  onArrivalOfHostPortsStreamEvent:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Description: 'The function that updates the HostPorts of Interest table.'
      Environment:
        Variables:
          TABLE_NAME_HOSTPORTS_OF_INTEREST:
            Ref: DerivedTableHostPortsOfInterest
      Events:
        DyDbEvent2:
          Type: DynamoDB
          Properties:
            StartingPosition: LATEST
            Stream:
              !GetAtt ResultsTableHostPorts.StreamArn
      Handler: onArrivalOfHostPortsStreamEvent.handler
      MemorySize: 256
      Role: !GetAtt onPopulateHostPortsOfInterestTableExecutionRole.Arn
      Runtime: python3.9
      Timeout: 20

  onArrivalOfResults:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Description: 'The function that parses the results, uploads them.'
      Environment:
        Variables:
          DYNAMODB_TTL_OFFSET:
            Ref: DynamoDbRetentionPeriod
          TABLE_NAME: 
            Ref: ResultsTableHosts
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket:
              Ref: ResultsBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: "csv"
      Handler: onArrivalOfResults.handler
      MemorySize: 256
      Role: !GetAtt onArrivalOfResultsExecutionRole.Arn
      Runtime: python3.9
      Timeout: 20

  onNmap:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'The nmap worker function.'
      Environment:
        Variables:
          WORK_QUEUE:
            Ref: NmapWorkQueue
          HOST_PORTS_TABLE:
            Ref: ResultsTableHostPorts
          HOSTS_OF_INTEREST_TABLE:
            Ref: DerivedTableHostsOfInterest
      Events:
        InvokeNmapScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: !Ref ScheduleNmapWorkerInvocationPeriodicityParameter
      ImageUri: !Join
        - ''
        - - !Ref EcrRepoUri
          - ':latest'
      PackageType: Image
      Role: !GetAtt onNmapExecutionRole.Arn
      Timeout: 120

  # TODO: I'm going to need a custom resource to update the ImageURI to the latest item.
  # E.g. aws lambda update-function-code --function-name  PerimeterScanner-DevTest-onNmap-XcpjqIJfhgM8 --image-uri 623056247312.dkr.ecr.ap-southeast-2.amazonaws.com/perimeterscanner-app-pipelineoutputregistry-qmeq969nipvp:latest

  onPopulateHostsOfInterestTable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Description: 'The function that constructs the Hosts of Interest Table.'
      Environment:
        Variables:
          DYNAMODB_TTL_OFFSET:
            Ref: DynamoDbRetentionPeriod
          TABLE_NAME_RESULTS:
            Ref: ResultsTableHosts
          TABLE_NAME_HOSTS_OF_INTEREST:
            Ref: DerivedTableHostsOfInterest
      Handler: onPopulateHostsOfInterestTable.handler
      MemorySize: 1024
      Role: !GetAtt onPopulateHostsOfInterestTableExecutionRole.Arn
      Runtime: python3.9
      Timeout: 60

  onPopulateNmapWorkQueue:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Description: 'The function that populates the Nmap work queue.'
      Environment:
        Variables:
          TABLE_TO_SCAN:
            Ref: DerivedTableHostsOfInterest
          QUEUE_TO_POPULATE:
            Ref: NmapWorkQueue
      Events:
        QueuePopulationScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: !Ref SchedulePopulateWorkQueuePeriodicityParameter
      Handler: onPopulateNmapWorkQueue.handler
      MemorySize: 1024
      Role: !GetAtt onPopulateNmapWorkQueueExecutionRole.Arn
      Runtime: python3.9
      Timeout: 60

  onArrivalOfResultsExecutionRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" # Important. Gives Lambda perms to write to CWatch.
      Path: "/"

  onArrivalOfResultsExecutionRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: policyForOnArrivalOfResultsExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 'dynamodb:PutItem'
            Resource: !GetAtt ResultsTableHosts.Arn
          - Effect: Allow
            Action: 
              - 's3:DeleteObject'
              - 's3:GetObject'
            Resource: !Join
              - ''
              - - !GetAtt ResultsBucket.Arn
                - /*
      Roles:
        - !Ref onArrivalOfResultsExecutionRole

  onNmapExecutionRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" # Important. Gives Lambda perms to write to CWatch.
      Path: "/"

  onNmapExecutionRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: policyForOnPopulateHostsOfInterestTableExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'ecr:*' # TODO: tighten, for least priv.
            Resource: !Ref EcrRepoArn
          - Effect: Allow
            Action:
              - 'sqs:DeleteMessage'
              - 'sqs:ReceiveMessage'
              - 'sqs:GetQueueAttributes'
            Resource: !GetAtt NmapWorkQueue.Arn
          - Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
            Resource: 
              - !GetAtt DerivedTableHostsOfInterest.Arn
              - !GetAtt ResultsTableHostPorts.Arn
      Roles:
        - !Ref onNmapExecutionRole

  onPopulateNmapWorkQueueExecutionRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" # Important. Gives Lambda perms to write to CWatch.
      Path: "/"

  onPopulateNmapWorkQueueExecutionRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: policyForonPopulateNmapWorkQueueExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # TODO: Allow read from table.
          # TODO: Allow write to queue.

          # TODO: Delete this b/s.
          - Effect: Allow
            Action:
              - 'dynamodb:DescribeStream'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:ListStreams'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
            Resource: 
              - !GetAtt DerivedTableHostsOfInterest.Arn
          - Effect: Allow
            Action: 
              - 'sqs:SendMessage'
            Resource: !GetAtt NmapWorkQueue.Arn
      Roles:
        - !Ref onPopulateNmapWorkQueueExecutionRole


  onPopulateHostsOfInterestTableExecutionRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" # Important. Gives Lambda perms to write to CWatch.
      Path: "/"

  onPopulateHostsOfInterestTableExecutionRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: policyForOnPopulateHostsOfInterestTableExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:DescribeStream'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:ListStreams'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
            Resource: 
              - !GetAtt DerivedTableHostsOfInterest.Arn
              - !GetAtt ResultsTableHosts.Arn
              - !Join
                - ''
                - - !GetAtt ResultsTableHosts.Arn
                  - '/index/*'
              - !Join
                - ''
                - - !GetAtt ResultsTableHosts.Arn
                  - '/stream/*'
          - Effect: Allow
            Action: 
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
            Resource: !GetAtt DerivedTableHostsOfInterest.Arn
      Roles:
        - !Ref onPopulateHostsOfInterestTableExecutionRole

  onPopulateHostPortsOfInterestTableExecutionRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" # Important. Gives Lambda perms to write to CWatch.
      Path: "/"

  onPopulateHostPortsOfInterestTableExecutionRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: policyForOnPopulateHostPortsOfInterestTableExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:DescribeStream'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:ListStreams'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
            Resource: 
              - !GetAtt DerivedTableHostPortsOfInterest.Arn
              - !GetAtt ResultsTableHostPorts.Arn
              - !Join
                - ''
                - - !GetAtt ResultsTableHostPorts.Arn
                  - '/index/*'
              - !Join
                - ''
                - - !GetAtt ResultsTableHostPorts.Arn
                  - '/stream/*'
          - Effect: Allow
            Action: 
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
            Resource: !GetAtt DerivedTableHostPortsOfInterest.Arn
      Roles:
        - !Ref onPopulateHostPortsOfInterestTableExecutionRole

  startEc2Instance:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Description: 'The function that starts my EC2 worker instance.'
      Environment:
        Variables:
          INSTANCE_ID: 
            Ref: WorkerInstance
      Events:
        ProducerScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: !Ref ScheduleStartInstancePeriodicityParameter
      InlineCode: |
        import boto3
        import os
        
        region = 'ap-southeast-2'
        ec2 = boto3.client('ec2', region_name=region)

        def handler(event, context):
          ec2.start_instances(InstanceIds = [os.environ.get('INSTANCE_ID')])

      MemorySize: 256
      Role: !GetAtt startEc2InstancesExecutionRole.Arn
      Runtime: python3.9
      Timeout: 20

  startEc2InstancesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" # Important. Gives Lambda perms to write to CWatch.
      Path: "/"

  startEc2InstancesExecutionRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: policyToAllowEc2InstancesToStart
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 'ec2:StartInstances'
            Resource: !Join
              - ''
              - - 'arn:aws:ec2:ap-southeast-2:*:instance/'
                - !Ref WorkerInstance

      Roles:
        - !Ref startEc2InstancesExecutionRole

